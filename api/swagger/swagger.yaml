basePath: /api/v1/
definitions:
  core.Course:
    properties:
      description:
        type: string
      id:
        type: string
      title:
        type: string
    type: object
  service.CreateCourseInput:
    properties:
      description:
        type: string
      title:
        type: string
    type: object
  service.GetUserInfoOutput:
    properties:
      display_name:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: string
      last_name:
        type: string
      registration_date:
        type: string
      roles:
        items:
          type: integer
        type: array
    type: object
  service.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
      persistent:
        type: boolean
    type: object
  service.SignupUserInput:
    properties:
      display_name:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
    type: object
  service.UpdateUserInfoInput:
    properties:
      display_name:
        type: string
      first_name:
        type: string
      last_name:
        type: string
    type: object
  utils.Response:
    properties:
      status:
        type: integer
      title:
        type: string
    type: object
  utils.ValidationError:
    properties:
      status:
        example: 400
        type: integer
      title:
        example: invalid request parameters
        type: string
      validation_errors:
        $ref: '#/definitions/validation.Errors'
    type: object
  validation.Errors:
    additionalProperties: {}
    type: object
host: localhost:8080
info:
  contact: {}
  description: REST API for Course Watch App
  title: Course Watch API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: authenticates the user log-in credentials
      parameters:
      - description: Login user details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/service.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.LoginInput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Authenticate user credentials
      tags:
      - Authentication
  /auth/signup:
    post:
      consumes:
      - application/json
      description: Creates new user with the given detials
      parameters:
      - description: New user signup details
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/service.SignupUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.LoginInput'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: New user signup
      tags:
      - Authentication
  /courses/:
    post:
      consumes:
      - application/json
      description: Creates a new Course entity
      parameters:
      - description: sign up info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/service.CreateCourseInput'
      produces:
      - application/json
      responses:
        "201":
          description: The generated id is returned in Location header
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Creates a new Course entity
      tags:
      - courses
  /courses/{id}:
    get:
      consumes:
      - application/json
      description: get course by id
      parameters:
      - description: course id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/core.Course'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Get Course By course id
      tags:
      - courses
  /user:
    get:
      consumes:
      - application/json
      description: returns info on the currently logged-in user. User_id is extracted
        from the bearer token
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.GetUserInfoOutput'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Retrieve current user data
      tags:
      - User
    put:
      consumes:
      - application/json
      description: modifies user info for the currently logged-in user. User_id is
        extracted from the bearer token
      parameters:
      - description: user info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/service.UpdateUserInfoInput'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/utils.ValidationError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/utils.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/utils.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/utils.Response'
      summary: Modify current user data
      tags:
      - User
swagger: "2.0"
tags:
- description: Managing user account
  name: User
- description: Temporary endpoints for Swagger demo. To be removed
  name: courses
- description: Login, logout and other security related operations
  name: Authentication
